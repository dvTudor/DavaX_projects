-- DROP TABLE debug_log

CREATE TABLE debug_log (
    log_id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    log_time TIMESTAMP DEFAULT SYSTIMESTAMP,
    module_name VARCHAR2(100),
    line_no NUMBER,
    log_message VARCHAR2(4000),
    log_level VARCHAR2(10),
    session_id VARCHAR2(50) DEFAULT SYS_CONTEXT('USERENV', 'SESSIONID')
);

CREATE OR REPLACE PACKAGE debug_util
IS
    g_debug_mode BOOLEAN;
    
    -- Activare/dezactivare mod debug
    PROCEDURE enable_debug;
    PROCEDURE disable_debug;
    -- Înregistrare mesaje și valori
    PROCEDURE write_log(p_module_name VARCHAR2, p_line NUMBER, p_message VARCHAR2, p_log_level VARCHAR2);
    PROCEDURE log_msg(p_module_name VARCHAR2, p_line NUMBER, p_message VARCHAR2);
    PROCEDURE log_warn(p_module_name VARCHAR2, p_line NUMBER, p_message VARCHAR2);
    PROCEDURE log_variable(p_module_name VARCHAR2, p_line NUMBER, p_name VARCHAR2, p_value VARCHAR2);
    PROCEDURE log_error(p_module_name VARCHAR2, p_line NUMBER, p_err VARCHAR2);
END debug_util;
/

CREATE OR REPLACE PACKAGE BODY debug_util
IS
    
    PROCEDURE enable_debug
    IS
    BEGIN
        g_debug_mode := TRUE;
    END;
    
    PROCEDURE disable_debug
    IS
    BEGIN
        g_debug_mode := FALSE;
    END;
    
    PROCEDURE write_log(p_module_name VARCHAR2, p_line NUMBER, p_message VARCHAR2, p_log_level VARCHAR2)
    IS
    BEGIN
        INSERT INTO debug_log (module_name, line_no, log_message, log_level)
        VALUES (p_module_name, p_line, p_message, UPPER(p_log_level));
    END;
    
    PROCEDURE log_msg(p_module_name VARCHAR2, p_line NUMBER, p_message VARCHAR2)
    IS
    BEGIN
        write_log(p_module_name, p_line, p_message, 'INFO');
    END;
    
    PROCEDURE log_variable(p_module_name VARCHAR2, p_line NUMBER, p_name VARCHAR2, p_value VARCHAR2)
    IS
    BEGIN
        write_log(p_module_name, p_line, 'Variable ' || p_name || ' = ' || p_value, 'DEBUG');
    END;
    
    PROCEDURE log_error(p_module_name VARCHAR2, p_line NUMBER, p_err VARCHAR2)
    IS
    BEGIN
        write_log(p_module_name, p_line, 'ERROR: ' || p_err, 'ERROR');
    END;
    
    PROCEDURE log_warn(p_module_name VARCHAR2, p_line NUMBER, p_message VARCHAR2)
    IS
    BEGIN
        write_log(p_module_name, p_line, p_message, 'WARN');
    END;
    
END debug_util;
/

CREATE OR REPLACE PROCEDURE adjust_salaries_by_commisison
IS
    CURSOR emp_cursor IS
        SELECT employee_id, salary, commission_pct FROM employees;
        
    v_emp_id employees.employee_id%TYPE;
    v_salary employees.salary%TYPE;
    v_commission_pct employees.commission_pct%TYPE;
BEGIN
    OPEN emp_cursor;

    LOOP
        FETCH emp_cursor INTO v_emp_id, v_salary, v_commission_pct;
        EXIT WHEN emp_cursor%NOTFOUND;
        
        IF debug_util.g_debug_mode
            THEN debug_util.log_msg($$PLSQL_UNIT, $$PLSQL_LINE, 'Adjusting salary of ' || v_salary || ' for employee ' || v_emp_id);
        END IF;
        
        BEGIN
        
        IF v_commission_pct IS NULL
            THEN IF debug_util.g_debug_mode
                    THEN debug_util.log_warn($$PLSQL_UNIT, $$PLSQL_LINE, 'No known commission for employee ' || v_emp_id);
                 END IF;
        END IF;
        
        v_salary := v_salary + v_salary * NVL(v_commission_pct, 0.02);
        
        IF debug_util.g_debug_mode
            THEN debug_util.log_variable($$PLSQL_UNIT, $$PLSQL_LINE, 'salary', v_salary);
        END IF;
        
        -- code testing if errors are logged
--        IF v_emp_id = 206
--            THEN
--                DECLARE
--                    test_no NUMBER;
--                BEGIN
--                    test_no := 1/0; -- try to trigget the error
--                END;
--        END IF;
        
        UPDATE EMPLOYEES
        SET salary = v_salary
        WHERE employee_id = v_emp_id;
        
        COMMIT;
        
        EXCEPTION
            WHEN OTHERS THEN    
                ROLLBACK;
                IF debug_util.g_debug_mode
                    THEN debug_util.log_error($$PLSQL_UNIT, $$PLSQL_LINE, SQLERRM);
                END IF;
        END;
    END LOOP;
    CLOSE emp_cursor;
END;
/

BEGIN
    adjust_salaries_by_commisison;
END;
/

SELECT * FROM employees;

BEGIN
    debug_util.enable_debug;
    adjust_salaries_by_commisison;
END;
/

SELECT * FROM debug_log ORDER BY log_id;

SELECT * FROM debug_log ORDER BY log_id DESC; -- to test if the error was logged